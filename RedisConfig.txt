package com.mxxk.lightstar.config;

import org.springframework.boot.autoconfigure.amqp.RabbitProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.StringRedisSerializer;
import redis.clients.jedis.JedisPoolConfig;

/**
 * RedisConfig
 *
 * @auther zhang
 * @date 2020/6/2
 **/
@Configuration
public class RedisConfig {

    /**
     * 1.配置jedis连接池的配置信息
     * @return
     */
    @Bean
    public JedisPoolConfig jedisPoolConfig(){

        JedisPoolConfig config=new JedisPoolConfig();

        /**最大空闲数
         * **/
        config.setMaxIdle(10);

         /**最小空闲书
          * **/
        config.setMinIdle(5);

        /**最大连接数
         * **/
        config.setMaxTotal(20);

        return config;
    }
    /**
    **创建JedisConnectionFactory，配置redis的连接信息
    **/
    @Bean
    public JedisConnectionFactory jedisConnectionFactory(JedisPoolConfig config){
        JedisConnectionFactory factory=new JedisConnectionFactory();
        //关联连接池的配置
        factory.setPoolConfig(config);

        //配置连接redis信息
        factory.setHostName("192.168.220.82");
        factory.setPort(6379);
        //factory.setDatabase();redis库的索引
        return factory;
    }
    /**
    创建redistemplate 用于执行redis操作的方法
    **
    **/
    @Bean
    public RedisTemplate<String,String> redisTemplate(JedisConnectionFactory factory){

        RedisTemplate<String,String> template=new RedisTemplate<>();
        //关联
        template.setConnectionFactory(factory);
        //为key设置序列化器
        template.setKeySerializer(new StringRedisSerializer());
        //为value设置序列化器
        template.setValueSerializer(new StringRedisSerializer());
        return template;

    }
}
